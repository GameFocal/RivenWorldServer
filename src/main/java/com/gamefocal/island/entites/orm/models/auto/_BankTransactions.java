package com.gamefocal.island.entites.orm.models.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import com.gamefocal.island.entites.orm.OrmModel;
import com.gamefocal.island.entites.orm.models.Player;

/**
 * Class _BankTransactions was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _BankTransactions extends OrmModel {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final NumericProperty<Float> AMOUNT = PropertyFactory.createNumeric("amount", Float.class);
    public static final StringProperty<String> CREATED_AT = PropertyFactory.createString("createdAt", String.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final EntityProperty<Player> PLAYER = PropertyFactory.createEntity("player", Player.class);

    protected float amount;
    protected String createdAt;
    protected String description;

    protected Object player;

    public void setAmount(float amount) {
        beforePropertyWrite("amount", this.amount, amount);
        this.amount = amount;
    }

    public float getAmount() {
        beforePropertyRead("amount");
        return this.amount;
    }

    public void setCreatedAt(String createdAt) {
        beforePropertyWrite("createdAt", this.createdAt, createdAt);
        this.createdAt = createdAt;
    }

    public String getCreatedAt() {
        beforePropertyRead("createdAt");
        return this.createdAt;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setPlayer(Player player) {
        setToOneTarget("player", player, true);
    }

    public Player getPlayer() {
        return (Player)readProperty("player");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "amount":
                return this.amount;
            case "createdAt":
                return this.createdAt;
            case "description":
                return this.description;
            case "player":
                return this.player;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "amount":
                this.amount = val == null ? 0 : (float)val;
                break;
            case "createdAt":
                this.createdAt = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "player":
                this.player = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeFloat(this.amount);
        out.writeObject(this.createdAt);
        out.writeObject(this.description);
        out.writeObject(this.player);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.amount = in.readFloat();
        this.createdAt = (String)in.readObject();
        this.description = (String)in.readObject();
        this.player = in.readObject();
    }

}
