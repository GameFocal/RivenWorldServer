package com.gamefocal.island.entites.orm.models.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import com.gamefocal.island.entites.orm.OrmModel;
import com.gamefocal.island.entites.orm.models.BankTransactions;
import com.gamefocal.island.entites.orm.models.Claims;

/**
 * Class _Player was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Player extends OrmModel {

    private static final long serialVersionUID = 1L;

    public static final String STEAMID_PK_COLUMN = "steamid";

    public static final NumericProperty<Float> ENERGY = PropertyFactory.createNumeric("energy", Float.class);
    public static final StringProperty<String> FIRST_SEEN_AT = PropertyFactory.createString("firstSeenAt", String.class);
    public static final NumericProperty<Float> HEALTH = PropertyFactory.createNumeric("health", Float.class);
    public static final NumericProperty<Float> HUNGER = PropertyFactory.createNumeric("hunger", Float.class);
    public static final StringProperty<String> INVENTORY = PropertyFactory.createString("inventory", String.class);
    public static final StringProperty<String> LAST_SEEN_AT = PropertyFactory.createString("lastSeenAt", String.class);
    public static final StringProperty<String> LOCATION = PropertyFactory.createString("location", String.class);
    public static final NumericProperty<Float> THIRST = PropertyFactory.createNumeric("thirst", Float.class);
    public static final ListProperty<BankTransactions> BANK_TRANSACTIONSS = PropertyFactory.createList("bankTransactionss", BankTransactions.class);
    public static final ListProperty<Claims> CLAIMSS = PropertyFactory.createList("claimss", Claims.class);

    protected Float energy;
    protected String firstSeenAt;
    protected Float health;
    protected Float hunger;
    protected String inventory;
    protected String lastSeenAt;
    protected String location;
    protected Float thirst;

    protected Object bankTransactionss;
    protected Object claimss;

    public void setEnergy(float energy) {
        beforePropertyWrite("energy", this.energy, energy);
        this.energy = energy;
    }

    public float getEnergy() {
        beforePropertyRead("energy");
        if(this.energy == null) {
            return 0;
        }
        return this.energy;
    }

    public void setFirstSeenAt(String firstSeenAt) {
        beforePropertyWrite("firstSeenAt", this.firstSeenAt, firstSeenAt);
        this.firstSeenAt = firstSeenAt;
    }

    public String getFirstSeenAt() {
        beforePropertyRead("firstSeenAt");
        return this.firstSeenAt;
    }

    public void setHealth(float health) {
        beforePropertyWrite("health", this.health, health);
        this.health = health;
    }

    public float getHealth() {
        beforePropertyRead("health");
        if(this.health == null) {
            return 0;
        }
        return this.health;
    }

    public void setHunger(float hunger) {
        beforePropertyWrite("hunger", this.hunger, hunger);
        this.hunger = hunger;
    }

    public float getHunger() {
        beforePropertyRead("hunger");
        if(this.hunger == null) {
            return 0;
        }
        return this.hunger;
    }

    public void setInventory(String inventory) {
        beforePropertyWrite("inventory", this.inventory, inventory);
        this.inventory = inventory;
    }

    public String getInventory() {
        beforePropertyRead("inventory");
        return this.inventory;
    }

    public void setLastSeenAt(String lastSeenAt) {
        beforePropertyWrite("lastSeenAt", this.lastSeenAt, lastSeenAt);
        this.lastSeenAt = lastSeenAt;
    }

    public String getLastSeenAt() {
        beforePropertyRead("lastSeenAt");
        return this.lastSeenAt;
    }

    public void setLocation(String location) {
        beforePropertyWrite("location", this.location, location);
        this.location = location;
    }

    public String getLocation() {
        beforePropertyRead("location");
        return this.location;
    }

    public void setThirst(float thirst) {
        beforePropertyWrite("thirst", this.thirst, thirst);
        this.thirst = thirst;
    }

    public float getThirst() {
        beforePropertyRead("thirst");
        if(this.thirst == null) {
            return 0;
        }
        return this.thirst;
    }

    public void addToBankTransactionss(BankTransactions obj) {
        addToManyTarget("bankTransactionss", obj, true);
    }

    public void removeFromBankTransactionss(BankTransactions obj) {
        removeToManyTarget("bankTransactionss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<BankTransactions> getBankTransactionss() {
        return (List<BankTransactions>)readProperty("bankTransactionss");
    }

    public void addToClaimss(Claims obj) {
        addToManyTarget("claimss", obj, true);
    }

    public void removeFromClaimss(Claims obj) {
        removeToManyTarget("claimss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Claims> getClaimss() {
        return (List<Claims>)readProperty("claimss");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "energy":
                return this.energy;
            case "firstSeenAt":
                return this.firstSeenAt;
            case "health":
                return this.health;
            case "hunger":
                return this.hunger;
            case "inventory":
                return this.inventory;
            case "lastSeenAt":
                return this.lastSeenAt;
            case "location":
                return this.location;
            case "thirst":
                return this.thirst;
            case "bankTransactionss":
                return this.bankTransactionss;
            case "claimss":
                return this.claimss;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "energy":
                this.energy = (Float)val;
                break;
            case "firstSeenAt":
                this.firstSeenAt = (String)val;
                break;
            case "health":
                this.health = (Float)val;
                break;
            case "hunger":
                this.hunger = (Float)val;
                break;
            case "inventory":
                this.inventory = (String)val;
                break;
            case "lastSeenAt":
                this.lastSeenAt = (String)val;
                break;
            case "location":
                this.location = (String)val;
                break;
            case "thirst":
                this.thirst = (Float)val;
                break;
            case "bankTransactionss":
                this.bankTransactionss = val;
                break;
            case "claimss":
                this.claimss = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.energy);
        out.writeObject(this.firstSeenAt);
        out.writeObject(this.health);
        out.writeObject(this.hunger);
        out.writeObject(this.inventory);
        out.writeObject(this.lastSeenAt);
        out.writeObject(this.location);
        out.writeObject(this.thirst);
        out.writeObject(this.bankTransactionss);
        out.writeObject(this.claimss);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.energy = (Float)in.readObject();
        this.firstSeenAt = (String)in.readObject();
        this.health = (Float)in.readObject();
        this.hunger = (Float)in.readObject();
        this.inventory = (String)in.readObject();
        this.lastSeenAt = (String)in.readObject();
        this.location = (String)in.readObject();
        this.thirst = (Float)in.readObject();
        this.bankTransactionss = in.readObject();
        this.claimss = in.readObject();
    }

}
